import matplotlib.pyplot as plt
import numpy as np


def f(x):
    return (x - 3) ** 3

def fd(x):
    return 3 * ((x - 3) ** 2)
x=np.arange(-1,3,0.1)
tmp=[0 for i in range (0,len(x))]
error=tmp
'''

def newtonmethod(f,df,initial ,eplsion):

    tmp[0]=(initial-f[0]/df[0])

    error[0]=(np.abs(tmp[0]-initial))
    k=1
    while error[k-1]>eplsion :
        tmp[k]=(tmp[k-1]-f[k-1]/df[k-1])
        error[k]=(abs(tmp[k]-tmp[k-1]))
        k=k+1
    return tmp[k]
'''



ff=f(x)
ffd=fd(x)


def newtonMethod(n, assum):
  time = n

  x = assum
  x_next=0
  A = f(x)
  B = fd(x)
  print('A = ' + str(A) + ',B = ' + str(B) + ',time = ' + str(time))
  if f(x) == 0.0:
    return time, x
  else:
    x_next = x - A / B
    print('Next x = ' + str(x_next))
  if A - f(x_next) < 1e-6:
    print('Meet f(x) = 0,x = ' + str(x_next))
    '''设置迭代跳出条件，同时输出满足f(x) = 0的x值'''
  else:
    return newtonMethod(n + 1, x_next)

newtonMethod(0, 4.0)
'''设置从0开始计数，x0 = 4.0'''




def ssqrt(number):
    eplison=0.0001
    x=3 #initial value
    y=0.5*number
    while abs(y-x)>eplison:
        tmp=y
        y=0.5*(y+number/y)
        x=tmp
    return y

print(ssqrt(2))
